// Generated by CoffeeScript 1.6.3
(function() {
  var Ball, Canvas, Emoji, Emotion, Emotional, Food, LightBox,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  window.App = (function() {
    var ACTIVE_CONTAINER, ACTIVE_EMOJI_CLASS, ATTRACT_EFFECT, BUMP_EFFECT, GROWTH_RATE, HALT;

    ACTIVE_EMOJI_CLASS = null;

    ACTIVE_CONTAINER = null;

    ATTRACT_EFFECT = 0.05;

    BUMP_EFFECT = -0.5;

    GROWTH_RATE = 0.2;

    HALT = false;

    function App() {
      var _this = this;
      this.lightBox = new LightBox('main-menu');
      this.canvas = new Canvas('canvas');
      this.mouse = {
        isDown: false,
        x: null,
        y: null
      };
      this.emotionals = [];
      this.food = [];
      this._initEvents();
      Emoji.loadSpriteSheet(function() {
        return _this.run();
      });
    }

    App.prototype._initEvents = function() {
      var w,
        _this = this;
      w = $(window);
      w.resize(function() {
        _this.canvas.el.width = w.width();
        return _this.canvas.el.height = w.height();
      });
      w.resize();
      $(this.canvas.el).mousedown(function() {
        return _this.mouse.isDown = true;
      });
      w.mouseup(function() {
        return _this.mouse.isDown = false;
      });
      w.mousemove(function(e) {
        _this.mouse.x = e.pageX;
        return _this.mouse.y = e.pageY;
      });
      return $('#okay').click(function() {
        _this.lightBox.hide();
        return _this._enableSettings();
      });
    };

    App.prototype._enableSettings = function() {
      var toggleActive,
        _this = this;
      $('#settings').show();
      $('#attract-distance .slider').slider({
        value: Ball.ATTRACT_DISTANCE,
        min: 0,
        max: 400,
        slide: function(e, ui) {
          Ball.ATTRACT_DISTANCE = ui.value;
          return Ball.ATTRACT_STRENGTH = 0.0003 * ui.value / 90;
        }
      });
      $('#speed .slider').slider({
        value: Ball.DAMPEN,
        min: 0.95,
        step: 0.01,
        max: 1.05,
        slide: function(e, ui) {
          return Ball.DAMPEN = ui.value;
        }
      });
      $('#halt input').click(function() {
        HALT = $(this).is(':checked');
        return null;
      });
      toggleActive = (function() {
        var active;
        active = null;
        return function(el) {
          if (active != null) {
            active.removeClass('active');
          }
          return active = $(el).addClass('active');
        };
      })();
      $('#emotional').click(function(e) {
        toggleActive(e.currentTarget);
        ACTIVE_EMOJI_CLASS = Emotional;
        return ACTIVE_CONTAINER = _this.emotionals;
      }).click();
      return $('#food').click(function(e) {
        toggleActive(e.currentTarget);
        ACTIVE_EMOJI_CLASS = Food;
        return ACTIVE_CONTAINER = _this.food;
      });
    };

    App.prototype.createEmojiAt = function(emojiClass, container, x, y) {
      var maxVelocity;
      maxVelocity = 4;
      return container.push(new emojiClass(x, y, Math.random() * maxVelocity - (maxVelocity / 2), Math.random() * maxVelocity - (maxVelocity / 2)));
    };

    App.prototype.drawLineBetweenEmoji = function(a, b, alpha) {
      this.canvas.ctx.strokeStyle = "rgba(1, 1, 1, " + alpha + ")";
      this.canvas.ctx.beginPath();
      this.canvas.ctx.moveTo(a.x, a.y);
      this.canvas.ctx.lineTo(b.x, b.y);
      this.canvas.ctx.stroke();
      return this.canvas.ctx.closePath();
    };

    App.prototype.updateEmotionals = function() {
      var a, alpha, b, i, j, len, lenMinus1, _results;
      i = 0;
      len = this.emotionals.length;
      lenMinus1 = len - 1;
      if (len > 0) {
        _results = [];
        while (true) {
          a = this.emotionals[i];
          a.emotion.neutralize();
          if (!HALT) {
            a.move();
          }
          j = i + 1;
          while (j < len) {
            b = this.emotionals[j];
            if (!HALT && a.checkCollision(b)) {
              a.emotion.update(BUMP_EFFECT);
              b.emotion.update(BUMP_EFFECT);
            } else {
              if (!(a.emotion.isUnhappy() || b.emotion.isUnhappy())) {
                if (alpha = a.checkAttraction(b)) {
                  this.drawLineBetweenEmoji(a, b, alpha);
                  a.emotion.update(ATTRACT_EFFECT);
                  b.emotion.update(ATTRACT_EFFECT);
                }
              }
            }
            j += 1;
          }
          a.checkBoundary(this.canvas.el.width, this.canvas.el.height);
          a.render(this.canvas.ctx);
          i += 1;
          if (i > lenMinus1) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    App.prototype.updateFood = function() {
      var e, f, i, _i, _len, _ref, _results;
      i = this.food.length;
      _results = [];
      while (i > 0) {
        i -= 1;
        f = this.food[i];
        if (!HALT) {
          f.move();
        }
        _ref = this.emotionals;
        for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
          e = _ref[_i];
          if (f.hasCollided(e)) {
            e.makeBigger(GROWTH_RATE);
            this.food.splice(i, 1);
          }
        }
        f.checkBoundary(this.canvas.el.width, this.canvas.el.height);
        _results.push(f.render(this.canvas.ctx));
      }
      return _results;
    };

    App.prototype.run = function() {
      var _this = this;
      this.canvas.clear();
      if (this.mouse.isDown) {
        this.createEmojiAt(ACTIVE_EMOJI_CLASS, ACTIVE_CONTAINER, this.mouse.x, this.mouse.y);
      }
      this.updateEmotionals();
      this.updateFood();
      return requestAnimationFrame(function() {
        return _this.run();
      });
    };

    return App;

  })();

  Ball = (function() {
    Ball.ATTRACT_DISTANCE = 90;

    Ball.ATTRACT_STRENGTH = 0.0003;

    Ball.BOUNCE_FRICTION = -0.9;

    Ball.DAMPEN = 1;

    function Ball(x, y, vx, vy, radius) {
      this.x = x;
      this.y = y;
      this.vx = vx;
      this.vy = vy;
      this.radius = radius != null ? radius : 10;
      this.mass = this.radius / 10;
    }

    Ball.prototype._rotate = function(x, y, cos, sin, reverse) {
      return {
        x: reverse ? x * cos + y * sin : x * cos - y * sin,
        y: reverse ? y * cos - x * sin : y * cos + x * sin
      };
    };

    Ball.prototype.move = function() {
      this.vx *= Ball.DAMPEN;
      this.vy *= Ball.DAMPEN;
      this.x += this.vx;
      return this.y += this.vy;
    };

    Ball.prototype.checkBoundary = function(farX, farY) {
      if (this.x - this.radius < 0) {
        this.x = this.radius;
        this.vx *= Ball.BOUNCE_FRICTION;
      } else if (this.x + this.radius > farX) {
        this.x = farX - this.radius;
        this.vx *= Ball.BOUNCE_FRICTION;
      }
      if (this.y - this.radius < 0) {
        this.y = this.radius;
        return this.vy *= Ball.BOUNCE_FRICTION;
      } else if (this.y + this.radius >= farY) {
        this.y = farY - this.radius;
        return this.vy *= Ball.BOUNCE_FRICTION;
      }
    };

    Ball.prototype.makeBigger = function(radiusIncrease) {
      this.radius += radiusIncrease;
      return this.mass = this.radius / 10;
    };

    Ball.prototype.hasCollided = function(other) {
      var dist, dx, dy;
      dx = other.x - this.x;
      dy = other.y - this.y;
      dist = Math.sqrt(dx * dx + dy * dy);
      return dist < this.radius + other.radius;
    };

    Ball.prototype.checkCollision = function(other) {
      var absV, angle, cos, dist, dx, dy, overlap, p0, p0F, p1, p1F, sin, v0, v0F, v1, v1F, vxReaction;
      dx = other.x - this.x;
      dy = other.y - this.y;
      dist = Math.sqrt(dx * dx + dy * dy);
      if (dist > this.radius + other.radius) {
        return false;
      }
      angle = Math.atan2(dy, dx);
      sin = Math.sin(angle);
      cos = Math.cos(angle);
      p0 = {
        x: 0,
        y: 0
      };
      p1 = this._rotate(dx, dy, cos, sin, true);
      v0 = this._rotate(this.vx, this.vy, cos, sin, true);
      v1 = this._rotate(other.vx, other.vy, cos, sin, true);
      vxReaction = v0.x - v1.x;
      v0.x = ((this.mass - other.mass) * v0.x + 2 * other.mass * v1.x) / (this.mass + other.mass);
      v1.x = vxReaction + v0.x;
      absV = Math.abs(v0.x) + Math.abs(v1.x);
      overlap = (this.radius + other.radius) - Math.abs(p0.x - p1.x);
      p0.x += v0.x / absV * overlap;
      p1.x += v1.x / absV * overlap;
      p0F = this._rotate(p0.x, p0.y, cos, sin, false);
      p1F = this._rotate(p1.x, p1.y, cos, sin, false);
      other.x = this.x + p1F.x;
      other.y = this.y + p1F.y;
      this.x = this.x + p0F.x;
      this.y = this.y + p0F.y;
      v0F = this._rotate(v0.x, v0.y, cos, sin, false);
      v1F = this._rotate(v1.x, v1.y, cos, sin, false);
      this.vx = v0F.x;
      this.vy = v0F.y;
      other.vx = v1F.x;
      other.vy = v1F.y;
      return true;
    };

    Ball.prototype.checkAttraction = function(other) {
      var alpha, ax, ay, dist, dx, dy;
      dx = other.x - this.x;
      dy = other.y - this.y;
      dist = Math.sqrt(dx * dx + dy * dy);
      if (dist > Ball.ATTRACT_DISTANCE) {
        return false;
      }
      ax = dx * Ball.ATTRACT_STRENGTH;
      ay = dy * Ball.ATTRACT_STRENGTH;
      other.vx -= ax / other.mass;
      other.vy -= ay / other.mass;
      this.vx += ax / this.mass;
      this.vy += ay / this.mass;
      return alpha = 1 - dist / Ball.ATTRACT_DISTANCE;
    };

    return Ball;

  })();

  Canvas = (function() {
    function Canvas(id) {
      this.id = id;
      this.el = document.getElementById(this.id);
      this._getContext();
    }

    Canvas.prototype._getContext = function() {
      if (!(this.ctx = this.el.getContext('2d'))) {
        return alert('2D canvas context could not be made!');
      }
    };

    Canvas.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.el.width, this.el.height);
    };

    return Canvas;

  })();

  Emoji = (function(_super) {
    __extends(Emoji, _super);

    Emoji.spriteSheet = {
      imgObj: null,
      src: 'imgs/apple_emoji.png',
      spriteDelta: 32,
      spritePaddingX: 5,
      spriteSize: 22,
      spriteCount: 867
    };

    Emoji.loadSpriteSheet = function(onDone) {
      this.spriteSheet.imgObj = new Image();
      this.spriteSheet.imgObj.onload = function() {
        return onDone();
      };
      return this.spriteSheet.imgObj.src = this.spriteSheet.src;
    };

    function Emoji(x, y, vx, vy) {
      Emoji.__super__.constructor.call(this, x, y, vx, vy);
    }

    Emoji.prototype._getEmojiSpriteIndex = function() {
      return alert('Must be overwritten!');
    };

    Emoji.prototype._getEmojiFaceOffset = function() {
      return Emoji.spriteSheet.spriteDelta * this._getEmojiSpriteIndex() + Emoji.spriteSheet.spritePaddingX;
    };

    Emoji.prototype.render = function(ctx) {
      return ctx.drawImage(Emoji.spriteSheet.imgObj, this._getEmojiFaceOffset(), 0, Emoji.spriteSheet.spriteSize, Emoji.spriteSheet.spriteSize, this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);
    };

    return Emoji;

  })(Ball);

  Emotional = (function(_super) {
    var EMOTION_CONTINUUM;

    __extends(Emotional, _super);

    EMOTION_CONTINUUM = [49, 48, 41, 35, 29, 58, 28, 26, 17, 5, 3];

    function Emotional(x, y, vx, vy) {
      this.emotion = new Emotion();
      Emotional.__super__.constructor.call(this, x, y, vx, vy);
    }

    Emotional.prototype._getEmojiSpriteIndex = function() {
      return EMOTION_CONTINUUM[Math.round((EMOTION_CONTINUUM.length - 1) * this.emotion.ratio())];
    };

    return Emotional;

  })(Emoji);

  Food = (function(_super) {
    var RANDOM_FOODS;

    __extends(Food, _super);

    RANDOM_FOODS = [539, 551, 557];

    function Food(x, y, vx, vy) {
      Food.__super__.constructor.call(this, x, y, vx, vy);
    }

    Food.prototype._getEmojiSpriteIndex = function() {
      return this.food_index != null ? this.food_index : this.food_index = RANDOM_FOODS[Math.floor(Math.random() * RANDOM_FOODS.length)];
    };

    return Food;

  })(Emoji);

  Emotion = (function() {
    var MAX_EMOTION, MIN_EMOTION, NEUTRAL_EMOTION;

    MIN_EMOTION = 0;

    MAX_EMOTION = 10;

    NEUTRAL_EMOTION = MAX_EMOTION / 2;

    function Emotion(value) {
      this.value = value != null ? value : NEUTRAL_EMOTION;
      if (value === 'happy') {
        this.value = MAX_EMOTION;
      } else if (value === 'angry') {
        this.value = MIN_EMOTION;
      }
    }

    Emotion.prototype.update = function(amount) {
      this.value += amount;
      if (this.value < MIN_EMOTION) {
        return this.value = MIN_EMOTION;
      } else if (this.value > MAX_EMOTION) {
        return this.value = MAX_EMOTION;
      }
    };

    Emotion.prototype.isUnhappy = function() {
      return Math.round(this.value) < NEUTRAL_EMOTION;
    };

    Emotion.prototype.ratio = function() {
      return this.value / MAX_EMOTION;
    };

    Emotion.prototype.neutralize = function(rate) {
      var delta;
      if (rate == null) {
        rate = 0.005;
      }
      delta = NEUTRAL_EMOTION - this.value;
      return this.value += delta * rate;
    };

    return Emotion;

  })();

  LightBox = (function() {
    var $backdrop;

    $backdrop = $('<div class="light-box-bg"></div>');

    LightBox.showBackdrop = function() {
      return $(document.body).append($backdrop);
    };

    LightBox.hideBackdrop = function() {
      return $backdrop.remove();
    };

    function LightBox(containerID) {
      this.el = $('#' + containerID);
      this._centerInWindow();
      this.show();
      this._bindEvents();
    }

    LightBox.prototype._bindEvents = function() {
      var _this = this;
      return $(window).resize(function() {
        return _this._centerInWindow();
      });
    };

    LightBox.prototype._centerInWindow = function() {
      var verticalOffset, w;
      w = $(window);
      verticalOffset = 35;
      return this.el.css({
        left: (w.width() - this.el.width()) / 2,
        top: (w.height() - this.el.height()) / 2 - verticalOffset
      });
    };

    LightBox.prototype.hide = function() {
      LightBox.hideBackdrop();
      return this.el.hide();
    };

    LightBox.prototype.show = function() {
      LightBox.showBackdrop();
      return this.el.show();
    };

    return LightBox;

  })();

}).call(this);
